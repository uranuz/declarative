Ivy directive declaration specification
Disclaimer: This spec is currently in early stage of development and can change!!!

Most of syntax in Ivy language is based on directives, which consists of directive name followed by attributes.
*def* directive is used to declare new directives, which could be used after their declaration in programme.
Directive definition consists of *def* directive name, followed by list of *definition directives*.

For this stage of development followed definition directives are subject to implement (their name still can change):
1. def.kwAttr - definition of block of named attributes. Their types could be defined. Some could me marked as optional
	Example: {# def.kwAttr attrName1: str, attrName2: int, attrName3: any, attrName4: array, attrName5: object, attrName5: bool #}

	?? How to describe default named attributes ??

	Maybe:
	{# def.kwAttr
		attrName1: [any, "Vasya"]
		attrName2: [int, 10]
	#}

2. def.expr - definition of block of positional attributes. These expressions will be calculated before passing to dir body
	Example: {# def.expr attrName1: str, attrName2: any #}

3. def.kwd - definition of keyword. Exactly this name should be present in specified position
	Example: {# def.kwd in #}

4. def.ident - definition of some identifier or variable name. Some identifier expected here.
	TODO: How to define multiple names, maybe optional
	Example: {# def.ident #}

5. def.block - definition of block or expression of Ivy language, that will be calculated before passing to dir body
	Example: {# def.block #}

6. def.blockAST - definition of block or expression that will not be calculated and shall be passed directly to dir body as AST
	Example: {# def.blockAST #}

7. def.exprAST - definition of expression that shall not be calculated, but passed to dir body directly as AST
	Example: {# def.exprAST #}

8. def.kwAttrAST - definition of named attibute which value shall not be calculated, but passed to dir body directly as AST
	Example: {# def.kwAttrAST #}
